// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id           String        @id @default(cuid())
  email        String        @unique
  password     String
  name         String
  role         Role          @default(USER)
  isVerified   Boolean       @default(false)
  
  // Optional profile fields
  phone        String?
  dateOfBirth  DateTime?
  gender       Gender?
  age          Int?
  nationality  String?
  
  // Relationships
  tests        Test[]
  refreshTokens RefreshToken[]
  
  // Timestamps
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@map("users")
}

model Test {
  id          String     @id @default(cuid())
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Test Details
  testType    TestType
  result      TestResult
  confidence  Float      @default(0.0) // AI confidence score (0-1)
  imageUrl    String?    // URL to stored test image
  
  // Location Data
  latitude    Float?
  longitude   Float?
  location    String?    // Human readable location
  
  // Metadata
  testDate    DateTime   @default(now())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  // Flags
  isReported  Boolean    @default(false) // Reported to health authorities
  isAnonymous Boolean    @default(false)

  @@map("tests")
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("refresh_tokens")
}

model Admin {
  id            String   @id @default(cuid())
  email         String   @unique
  password      String
  name          String
  role          AdminRole @default(ADMIN)
  permissions   String[] // JSON array of permissions
  lastLoginAt   DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("admins")
}

model Alert {
  id          String      @id @default(cuid())
  type        AlertType
  title       String
  message     String
  severity    AlertSeverity
  location    String?
  coordinates String?     // JSON: {lat, lng}
  metadata    String?     // JSON metadata
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  resolvedAt  DateTime?

  @@map("alerts")
}

// Enums
enum Gender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

enum Role {
  USER
  ADMIN
  SUPER_ADMIN
}

enum TestType {
  COVID_19
  PREGNANCY
  INFLUENZA_A
  INFLUENZA_B
  STREP_A
  OTHER
}

enum TestResult {
  POSITIVE
  NEGATIVE
  INVALID
  INCONCLUSIVE
}

enum AdminRole {
  ADMIN
  SUPER_ADMIN
  HEALTH_OFFICER
  DATA_ANALYST
}

enum AlertType {
  OUTBREAK
  HIGH_POSITIVITY_RATE
  SYSTEM_ALERT
  DATA_ANOMALY
}

enum AlertSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}